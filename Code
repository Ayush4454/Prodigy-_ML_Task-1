import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Step 1: Generate synthetic customer purchase history data
# For demonstration, we'll create a DataFrame with random data
np.random.seed(42)
data = {
    'CustomerID': range(1, 101),
    'Annual Income (k$)': np.random.randint(30, 150, size=100),
    'Spending Score (1-100)': np.random.randint(1, 100, size=100)
}
df = pd.DataFrame(data)

# Step 2: Explore the dataset
print(df.head())
print(df.info())

# Step 3: Data preprocessing
# Select relevant features for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Determine the optimal number of clusters using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the elbow graph
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.grid()
plt.show()

# Step 5: Fit the K-means model with the optimal number of clusters
optimal_k = 5  # Choose the optimal number of clusters based on the elbow graph
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Step 6: Add the cluster labels to the original dataset
df['Cluster'] = clusters

# Step 7: Visualize the clusters
plt.figure(figsize=(10, 5))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='viridis', s=100)
plt.title('Customer Segments')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend(title='Cluster')
plt.show()

# Step 8: Save the clustered data to a new CSV file
df.to_csv('customer_segments.csv', index=False)
print("Clustered data saved to 'customer_segments.csv'")
